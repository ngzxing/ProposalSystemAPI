// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProposalSystem.Data;

#nullable disable

namespace ProposalSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240719075617_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Lecturer",
                            NormalizedName = "LECTURER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "lecturer1",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "lecturer2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "lecturer3",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "student1",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "student2",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "student3",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProposalSystem.Models.AcademicProgram", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AcademicPrograms");

                    b.HasData(
                        new
                        {
                            Id = "program1",
                            Description = "Software Engineering Description",
                            Name = "Software Engineering"
                        },
                        new
                        {
                            Id = "program2",
                            Description = "Data Engineering Description",
                            Name = "Data Engineering"
                        });
                });

            modelBuilder.Entity("ProposalSystem.Models.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            Id = "admin1",
                            AdminId = "A21EC0213"
                        });
                });

            modelBuilder.Entity("ProposalSystem.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Logined")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "251155c7-840f-45a0-b972-8f8992e91646",
                            Email = "ngzixing@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Logined = false,
                            NormalizedEmail = "NGZIXING@EXAMPLE.COM",
                            NormalizedUserName = "NGZIXING",
                            PasswordHash = "AQAAAAIAAYagAAAAEMcO9PT9qNxzfd20HmaEJ3YlEha0W1tFWsGAPZOatPgC6ipijVIsm3i7ALvsLkT14w==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f66befb2-0020-4ca0-bd29-c34e183f92eb",
                            TwoFactorEnabled = false,
                            UserName = "NgZiXing"
                        },
                        new
                        {
                            Id = "lecturer1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9380b9f7-26b3-4857-89b1-6c748fc06ee8",
                            Email = "angyiqin@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Logined = false,
                            NormalizedEmail = "ANGYIQIN@EXAMPLE.COM",
                            NormalizedUserName = "ANGYIQIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEImL4w7x/iOrQdHPig/fG4DHJZdzzWjY7ElaEqeLDS8f6eYEN5x5K4tfLb2jTTPqg==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a475eaf2-2b89-4801-ba35-3163803e0327",
                            TwoFactorEnabled = false,
                            UserName = "AngYiQin"
                        },
                        new
                        {
                            Id = "lecturer2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2696f74-82ea-4d09-8731-d688e6978dfe",
                            Email = "liewyvonne@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Logined = false,
                            NormalizedEmail = "liewyvonne@EXAMPLE.COM",
                            NormalizedUserName = "LIEWYVONNE",
                            PasswordHash = "AQAAAAIAAYagAAAAEMMgF/9lcg2SoiRglmR23jX4T8+7E34iusZMrU5ABI4T0cSlQhdNGSg7KsT8+j/FpQ==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aab6e28b-47ec-4fbd-b768-028990113d83",
                            TwoFactorEnabled = false,
                            UserName = "LiewYvonne"
                        },
                        new
                        {
                            Id = "lecturer3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "689c27a1-5883-4519-ae1f-1708a3cb8be7",
                            Email = "soowanying@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Logined = false,
                            NormalizedEmail = "SOOWANYING@EXAMPLE.COM",
                            NormalizedUserName = "SOOWANYING",
                            PasswordHash = "AQAAAAIAAYagAAAAEFVgZZdQUbBGNVe5bGelLf4XyTsxVn/XwP4z86lCq0nsnRZWTqmF3ZES12qNaXRvrQ==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64e30a89-d801-41f9-a5fc-c4fca64ec41d",
                            TwoFactorEnabled = false,
                            UserName = "SooWanYing"
                        },
                        new
                        {
                            Id = "student1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "becbfb63-6df3-414d-bbcd-59f32f5dff26",
                            Email = "yewruixiang@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Logined = false,
                            NormalizedEmail = "YEWRUIXIANG@EXAMPLE.COM",
                            NormalizedUserName = "YEWRUIXIANG",
                            PasswordHash = "AQAAAAIAAYagAAAAEJZRm6frfIISUl+5tF20d24f6mkqZeWGVABk1EzlxOp+7ApUe5cVJi1HtTtlQI1Qhg==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c436b38-52ff-4b3c-bdd2-1df833a9d60a",
                            TwoFactorEnabled = false,
                            UserName = "YewRuiXiang"
                        },
                        new
                        {
                            Id = "student2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "720fbd7a-e4dd-4565-9e47-18b47cb22348",
                            Email = "loozhiyuan@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Logined = false,
                            NormalizedEmail = "LOOZHIYUAN@EXAMPLE.COM",
                            NormalizedUserName = "LOOZHIYUAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJKvxbVTQvouTHnL6LKUjs3HZ9Cb9GQzNz4KHeXJP5wYo7gIvPRMH+PnH7oY0gzfmA==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "62f7cc0a-5029-42b3-aaa5-0283401551eb",
                            TwoFactorEnabled = false,
                            UserName = "LooZhiYuan"
                        },
                        new
                        {
                            Id = "student3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2ae707a-0b44-41a9-a588-b8598c8d47b2",
                            Email = "samchiayun@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Logined = false,
                            NormalizedEmail = "SAMCHIAYUN@EXAMPLE.COM",
                            NormalizedUserName = "SAMCHIAYUN",
                            PasswordHash = "AQAAAAIAAYagAAAAELKQ1Gy183hKxTZuaspMeFeq+xcp0Gc9gnLtvWDg59nLbOZN0BDGzm5MJNhpow28HA==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1cdb9311-a86e-4246-b22c-ad73228d9f54",
                            TwoFactorEnabled = false,
                            UserName = "SamChiaYun"
                        });
                });

            modelBuilder.Entity("ProposalSystem.Models.ApplySupervisor", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ApplyState")
                        .HasColumnType("int");

                    b.Property<string>("MatricId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SupervisorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MatricId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("ApplySupervisors");

                    b.HasData(
                        new
                        {
                            Id = "committee1",
                            ApplyState = 2,
                            MatricId = "A21EC0149",
                            SupervisorId = "A21EC1234"
                        },
                        new
                        {
                            Id = "committee2",
                            ApplyState = 1,
                            MatricId = "A21EC0149",
                            SupervisorId = "A21EC2234"
                        },
                        new
                        {
                            Id = "committee3",
                            ApplyState = 1,
                            MatricId = "A21EC0197",
                            SupervisorId = "A21EC3234"
                        },
                        new
                        {
                            Id = "committee4",
                            ApplyState = 0,
                            MatricId = "A21EC0197",
                            SupervisorId = "A21EC2234"
                        });
                });

            modelBuilder.Entity("ProposalSystem.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackupEvaluatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvaluatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProposalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("ProposalId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ProposalSystem.Models.Committee", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AcademicProgramId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LecturerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("AcademicProgramId", "LecturerId")
                        .IsUnique();

                    b.ToTable("Committees");

                    b.HasData(
                        new
                        {
                            Id = "committee1",
                            AcademicProgramId = "program1",
                            LecturerId = "A21EC1234"
                        },
                        new
                        {
                            Id = "committee2",
                            AcademicProgramId = "program1",
                            LecturerId = "A21EC2234"
                        },
                        new
                        {
                            Id = "committee3",
                            AcademicProgramId = "program2",
                            LecturerId = "A21EC3234"
                        });
                });

            modelBuilder.Entity("ProposalSystem.Models.Lecturer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AcademicProgramId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Domain")
                        .HasColumnType("int");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("StaffId")
                        .IsUnique();

                    b.ToTable("Lecturers");

                    b.HasData(
                        new
                        {
                            Id = "lecturer1",
                            AcademicProgramId = "program1",
                            Domain = 0,
                            StaffId = "A21EC1234"
                        },
                        new
                        {
                            Id = "lecturer2",
                            AcademicProgramId = "program1",
                            Domain = 0,
                            StaffId = "A21EC2234"
                        },
                        new
                        {
                            Id = "lecturer3",
                            AcademicProgramId = "program2",
                            Domain = 1,
                            StaffId = "A21EC3234"
                        });
                });

            modelBuilder.Entity("ProposalSystem.Models.Proposal", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<string>("LinkForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkProposal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Mark")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("ProposalStatus")
                        .HasColumnType("int");

                    b.Property<int?>("Semester")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Session")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Year")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Proposals");

                    b.HasData(
                        new
                        {
                            Id = "proposal1",
                            CreatedAt = new DateTime(2024, 7, 15, 8, 23, 50, 0, DateTimeKind.Unspecified),
                            Domain = 0,
                            LinkForm = "1o8s4xOvuPbZVN-LhpV-IhwE54-Z85VAy",
                            LinkProposal = "1-emCUoUVFDOTgwWn0YAdWGf7xz_2cjOj",
                            Mark = 89m,
                            ProposalStatus = 1,
                            Semester = 1,
                            Session = 1,
                            StudentId = "A21EC0149",
                            Title = "Attention Is All You Need",
                            Year = 1
                        },
                        new
                        {
                            Id = "proposal2",
                            CreatedAt = new DateTime(2024, 7, 14, 7, 13, 50, 0, DateTimeKind.Unspecified),
                            Domain = 0,
                            LinkForm = "1o8s4xOvuPbZVN-LhpV-IhwE54-Z85VAy",
                            LinkProposal = "1EZ8hzuu1dx5TtjLvQyAihEW6YRC3HJpt",
                            ProposalStatus = 2,
                            Semester = 1,
                            Session = 1,
                            StudentId = "A21EC0149",
                            Title = "GPT",
                            Year = 1
                        },
                        new
                        {
                            Id = "proposal3",
                            CreatedAt = new DateTime(2024, 7, 13, 10, 56, 51, 0, DateTimeKind.Unspecified),
                            Domain = 0,
                            LinkForm = "1o8s4xOvuPbZVN-LhpV-IhwE54-Z85VAy",
                            LinkProposal = "1iSMSMqsudSCIsOUwxhS1aqIwAItqPlKc",
                            ProposalStatus = 3,
                            Semester = 1,
                            Session = 1,
                            StudentId = "A21EC0149",
                            Title = "Bert",
                            Year = 1
                        },
                        new
                        {
                            Id = "proposal4",
                            CreatedAt = new DateTime(2024, 7, 1, 8, 0, 32, 0, DateTimeKind.Unspecified),
                            Domain = 0,
                            LinkForm = "1o8s4xOvuPbZVN-LhpV-IhwE54-Z85VAy",
                            LinkProposal = "1HFVTio-i4xXXScDc8PBEmRYfbQZKGeiP",
                            ProposalStatus = 0,
                            Semester = 1,
                            Session = 1,
                            StudentId = "A21EC0149",
                            Title = "Chain Of Thought",
                            Year = 1
                        },
                        new
                        {
                            Id = "proposal5",
                            CreatedAt = new DateTime(2024, 6, 15, 12, 23, 21, 0, DateTimeKind.Unspecified),
                            Domain = 1,
                            LinkForm = "1o8s4xOvuPbZVN-LhpV-IhwE54-Z85VAy",
                            LinkProposal = "1-emCUoUVFDOTgwWn0YAdWGf7xz_2cjOj",
                            ProposalStatus = 0,
                            Semester = 1,
                            Session = 2,
                            StudentId = "A21EC0197",
                            Title = "Attention Is All You Need",
                            Year = 1
                        },
                        new
                        {
                            Id = "proposal6",
                            CreatedAt = new DateTime(2024, 6, 24, 11, 11, 29, 0, DateTimeKind.Unspecified),
                            Domain = 1,
                            LinkForm = "1o8s4xOvuPbZVN-LhpV-IhwE54-Z85VAy",
                            LinkProposal = "1EZ8hzuu1dx5TtjLvQyAihEW6YRC3HJpt",
                            ProposalStatus = 3,
                            Semester = 2,
                            Session = 3,
                            StudentId = "A21EC0127",
                            Title = "GPT",
                            Year = 1
                        });
                });

            modelBuilder.Entity("ProposalSystem.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AcademicProgramId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstEvaluatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MatricId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecondEvaluatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Semester")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Session")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("SupervisorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Year")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("FirstEvaluatorId");

                    b.HasIndex("MatricId")
                        .IsUnique();

                    b.HasIndex("SecondEvaluatorId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "student1",
                            AcademicProgramId = "program1",
                            FirstEvaluatorId = "A21EC2234",
                            MatricId = "A21EC0149",
                            SecondEvaluatorId = "A21EC1234",
                            Semester = 1,
                            Session = 1,
                            SupervisorId = "A21EC3234",
                            Year = 1
                        },
                        new
                        {
                            Id = "student2",
                            AcademicProgramId = "program1",
                            FirstEvaluatorId = "A21EC2234",
                            MatricId = "A21EC0197",
                            SecondEvaluatorId = "A21EC1234",
                            Semester = 1,
                            Session = 2,
                            SupervisorId = "A21EC3234",
                            Year = 1
                        },
                        new
                        {
                            Id = "student3",
                            AcademicProgramId = "program2",
                            MatricId = "A21EC0127",
                            Semester = 2,
                            Session = 3,
                            SupervisorId = "A21EC1234",
                            Year = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProposalSystem.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProposalSystem.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProposalSystem.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProposalSystem.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProposalSystem.Models.Admin", b =>
                {
                    b.HasOne("ProposalSystem.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ProposalSystem.Models.ApplySupervisor", b =>
                {
                    b.HasOne("ProposalSystem.Models.Student", "Student")
                        .WithMany("Applications")
                        .HasForeignKey("MatricId")
                        .HasPrincipalKey("MatricId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ProposalSystem.Models.Lecturer", "Supervisor")
                        .WithMany("Applications")
                        .HasForeignKey("SupervisorId")
                        .HasPrincipalKey("StaffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("ProposalSystem.Models.Comment", b =>
                {
                    b.HasOne("ProposalSystem.Models.Lecturer", "Evaluator")
                        .WithMany("Comments")
                        .HasForeignKey("EvaluatorId")
                        .HasPrincipalKey("StaffId")
                        .IsRequired();

                    b.HasOne("ProposalSystem.Models.Proposal", "Proposal")
                        .WithMany("Comments")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluator");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("ProposalSystem.Models.Committee", b =>
                {
                    b.HasOne("ProposalSystem.Models.AcademicProgram", "AcademicProgram")
                        .WithMany("Committees")
                        .HasForeignKey("AcademicProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProposalSystem.Models.Lecturer", "Lecturer")
                        .WithMany("Committee")
                        .HasForeignKey("LecturerId")
                        .HasPrincipalKey("StaffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AcademicProgram");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("ProposalSystem.Models.Lecturer", b =>
                {
                    b.HasOne("ProposalSystem.Models.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProposalSystem.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicProgram");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ProposalSystem.Models.Proposal", b =>
                {
                    b.HasOne("ProposalSystem.Models.Student", "Student")
                        .WithMany("Proposals")
                        .HasForeignKey("StudentId")
                        .HasPrincipalKey("MatricId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ProposalSystem.Models.Student", b =>
                {
                    b.HasOne("ProposalSystem.Models.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProposalSystem.Models.Lecturer", "FirstEvaluator")
                        .WithMany("FirstEvaluatedStudents")
                        .HasForeignKey("FirstEvaluatorId")
                        .HasPrincipalKey("StaffId");

                    b.HasOne("ProposalSystem.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProposalSystem.Models.Lecturer", "SecondEvaluator")
                        .WithMany("SecondEvaluatedStudents")
                        .HasForeignKey("SecondEvaluatorId")
                        .HasPrincipalKey("StaffId");

                    b.HasOne("ProposalSystem.Models.Lecturer", "Supervisor")
                        .WithMany("SupervisedStudents")
                        .HasForeignKey("SupervisorId")
                        .HasPrincipalKey("StaffId");

                    b.Navigation("AcademicProgram");

                    b.Navigation("AppUser");

                    b.Navigation("FirstEvaluator");

                    b.Navigation("SecondEvaluator");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("ProposalSystem.Models.AcademicProgram", b =>
                {
                    b.Navigation("Committees");
                });

            modelBuilder.Entity("ProposalSystem.Models.Lecturer", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Comments");

                    b.Navigation("Committee");

                    b.Navigation("FirstEvaluatedStudents");

                    b.Navigation("SecondEvaluatedStudents");

                    b.Navigation("SupervisedStudents");
                });

            modelBuilder.Entity("ProposalSystem.Models.Proposal", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ProposalSystem.Models.Student", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Proposals");
                });
#pragma warning restore 612, 618
        }
    }
}
